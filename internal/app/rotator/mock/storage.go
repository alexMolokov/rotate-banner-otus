// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/alexMolokov/rotate-banner-otus/internal/app/rotator (interfaces: Storage)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	rotatorstorage "github.com/alexMolokov/rotate-banner-otus/internal/storage/rotator"
	gomock "github.com/golang/mock/gomock"
)

// MockStorage is a mock of Storage interface.
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
}

// MockStorageMockRecorder is the mock recorder for MockStorage.
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance.
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// AddBannerToSlot mocks base method.
func (m *MockStorage) AddBannerToSlot(arg0 context.Context, arg1, arg2 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddBannerToSlot", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddBannerToSlot indicates an expected call of AddBannerToSlot.
func (mr *MockStorageMockRecorder) AddBannerToSlot(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddBannerToSlot", reflect.TypeOf((*MockStorage)(nil).AddBannerToSlot), arg0, arg1, arg2)
}

// CountDisplay mocks base method.
func (m *MockStorage) CountDisplay(arg0 context.Context, arg1, arg2, arg3 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountDisplay", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// CountDisplay indicates an expected call of CountDisplay.
func (mr *MockStorageMockRecorder) CountDisplay(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountDisplay", reflect.TypeOf((*MockStorage)(nil).CountDisplay), arg0, arg1, arg2, arg3)
}

// CountTransition mocks base method.
func (m *MockStorage) CountTransition(arg0 context.Context, arg1, arg2, arg3 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountTransition", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// CountTransition indicates an expected call of CountTransition.
func (mr *MockStorageMockRecorder) CountTransition(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountTransition", reflect.TypeOf((*MockStorage)(nil).CountTransition), arg0, arg1, arg2, arg3)
}

// GetBannerByID mocks base method.
func (m *MockStorage) GetBannerByID(arg0 context.Context, arg1 int64) (*rotatorstorage.Banner, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBannerByID", arg0, arg1)
	ret0, _ := ret[0].(*rotatorstorage.Banner)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBannerByID indicates an expected call of GetBannerByID.
func (mr *MockStorageMockRecorder) GetBannerByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBannerByID", reflect.TypeOf((*MockStorage)(nil).GetBannerByID), arg0, arg1)
}

// GetBannersStat mocks base method.
func (m *MockStorage) GetBannersStat(arg0 context.Context, arg1, arg2 int64) ([]rotatorstorage.BannerStat, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBannersStat", arg0, arg1, arg2)
	ret0, _ := ret[0].([]rotatorstorage.BannerStat)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetBannersStat indicates an expected call of GetBannersStat.
func (mr *MockStorageMockRecorder) GetBannersStat(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBannersStat", reflect.TypeOf((*MockStorage)(nil).GetBannersStat), arg0, arg1, arg2)
}

// GetSlotByID mocks base method.
func (m *MockStorage) GetSlotByID(arg0 context.Context, arg1 int64) (*rotatorstorage.Slot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSlotByID", arg0, arg1)
	ret0, _ := ret[0].(*rotatorstorage.Slot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSlotByID indicates an expected call of GetSlotByID.
func (mr *MockStorageMockRecorder) GetSlotByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSlotByID", reflect.TypeOf((*MockStorage)(nil).GetSlotByID), arg0, arg1)
}

// GetSocialGroupByID mocks base method.
func (m *MockStorage) GetSocialGroupByID(arg0 context.Context, arg1 int64) (*rotatorstorage.SocialGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSocialGroupByID", arg0, arg1)
	ret0, _ := ret[0].(*rotatorstorage.SocialGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSocialGroupByID indicates an expected call of GetSocialGroupByID.
func (mr *MockStorageMockRecorder) GetSocialGroupByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSocialGroupByID", reflect.TypeOf((*MockStorage)(nil).GetSocialGroupByID), arg0, arg1)
}

// RemoveBannerFromSlot mocks base method.
func (m *MockStorage) RemoveBannerFromSlot(arg0 context.Context, arg1, arg2 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveBannerFromSlot", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveBannerFromSlot indicates an expected call of RemoveBannerFromSlot.
func (mr *MockStorageMockRecorder) RemoveBannerFromSlot(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveBannerFromSlot", reflect.TypeOf((*MockStorage)(nil).RemoveBannerFromSlot), arg0, arg1, arg2)
}

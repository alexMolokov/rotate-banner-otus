// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/alexMolokov/rotate-banner-otus/internal/server/grpc (interfaces: Application)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockApplication is a mock of Application interface.
type MockApplication struct {
	ctrl     *gomock.Controller
	recorder *MockApplicationMockRecorder
}

// MockApplicationMockRecorder is the mock recorder for MockApplication.
type MockApplicationMockRecorder struct {
	mock *MockApplication
}

// NewMockApplication creates a new mock instance.
func NewMockApplication(ctrl *gomock.Controller) *MockApplication {
	mock := &MockApplication{ctrl: ctrl}
	mock.recorder = &MockApplicationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApplication) EXPECT() *MockApplicationMockRecorder {
	return m.recorder
}

// AddBannerToSlot mocks base method.
func (m *MockApplication) AddBannerToSlot(arg0 context.Context, arg1, arg2 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddBannerToSlot", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddBannerToSlot indicates an expected call of AddBannerToSlot.
func (mr *MockApplicationMockRecorder) AddBannerToSlot(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddBannerToSlot", reflect.TypeOf((*MockApplication)(nil).AddBannerToSlot), arg0, arg1, arg2)
}

// ChooseBanner mocks base method.
func (m *MockApplication) ChooseBanner(arg0 context.Context, arg1, arg2 int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChooseBanner", arg0, arg1, arg2)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChooseBanner indicates an expected call of ChooseBanner.
func (mr *MockApplicationMockRecorder) ChooseBanner(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChooseBanner", reflect.TypeOf((*MockApplication)(nil).ChooseBanner), arg0, arg1, arg2)
}

// CountTransition mocks base method.
func (m *MockApplication) CountTransition(arg0 context.Context, arg1, arg2, arg3 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountTransition", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// CountTransition indicates an expected call of CountTransition.
func (mr *MockApplicationMockRecorder) CountTransition(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountTransition", reflect.TypeOf((*MockApplication)(nil).CountTransition), arg0, arg1, arg2, arg3)
}

// RemoveBannerFromSlot mocks base method.
func (m *MockApplication) RemoveBannerFromSlot(arg0 context.Context, arg1, arg2 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveBannerFromSlot", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveBannerFromSlot indicates an expected call of RemoveBannerFromSlot.
func (mr *MockApplicationMockRecorder) RemoveBannerFromSlot(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveBannerFromSlot", reflect.TypeOf((*MockApplication)(nil).RemoveBannerFromSlot), arg0, arg1, arg2)
}
